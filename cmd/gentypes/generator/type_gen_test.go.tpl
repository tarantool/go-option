// Code generated by github.com/tarantool/go-option; DO NOT EDIT.

package {{ .packageName }}_test

import (
	{{ range $i, $import := .imports }}
	"{{ $import }}"
	{{ end }}

	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/vmihailenco/msgpack/v5"

	"github.com/tarantool/go-option"
)

func Test{{.Name}}_IsSome(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		some{{.Name}} := option.Some{{.Name}}({{.TestingValue}})
		assert.True(t, some{{.Name}}.IsSome())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		empty{{.Name}} := option.None{{.Name}}()
		assert.False(t, empty{{.Name}}.IsSome())
	})
}

func Test{{.Name}}_IsZero(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		some{{.Name}} := option.Some{{.Name}}({{.TestingValue}})
		assert.False(t, some{{.Name}}.IsZero())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		empty{{.Name}} := option.None{{.Name}}()
		assert.True(t, empty{{.Name}}.IsZero())
	})
}

func Test{{.Name}}_IsNil(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		some{{.Name}} := option.Some{{.Name}}({{.TestingValue}})
		assert.False(t, some{{.Name}}.IsNil())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		empty{{.Name}} := option.None{{.Name}}()
		assert.True(t, empty{{.Name}}.IsNil())
	})
}

func Test{{.Name}}_Get(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		some{{.Name}} := option.Some{{.Name}}({{.TestingValue}})
		val, ok := some{{.Name}}.Get()
		require.True(t, ok)
		assert.EqualValues(t, {{.TestingValue}}, val)
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		empty{{.Name}} := option.None{{.Name}}()
		_, ok := empty{{.Name}}.Get()
		require.False(t, ok)
	})
}

func Test{{.Name}}_MustGet(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		some{{.Name}} := option.Some{{.Name}}({{.TestingValue}})
		assert.EqualValues(t, {{.TestingValue}}, some{{.Name}}.MustGet())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		empty{{.Name}} := option.None{{.Name}}()
		assert.Panics(t, func() {
			empty{{.Name}}.MustGet()
		})
	})
}

func Test{{.Name}}_Unwrap(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		some{{.Name}} := option.Some{{.Name}}({{.TestingValue}})
		assert.EqualValues(t, {{.TestingValue}}, some{{.Name}}.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		empty{{.Name}} := option.None{{.Name}}()
		assert.NotPanics(t, func() {
			empty{{.Name}}.Unwrap()
		})
	})
}

func Test{{.Name}}_UnwrapOr(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		some{{.Name}} := option.Some{{.Name}}({{.TestingValue}})
		assert.EqualValues(t, {{.TestingValue}}, some{{.Name}}.UnwrapOr({{.UnexpectedTestingValue}}))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		empty{{.Name}} := option.None{{.Name}}()
		assert.EqualValues(t, {{.UnexpectedTestingValue}}, empty{{.Name}}.UnwrapOr({{.UnexpectedTestingValue}}))
	})
}

func Test{{.Name}}_UnwrapOrElse(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		some{{.Name}} := option.Some{{.Name}}({{.TestingValue}})
		assert.EqualValues(t, {{.TestingValue}}, some{{.Name}}.UnwrapOrElse(func() {{.Type}} {
			return {{.UnexpectedTestingValue}}
		}))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		empty{{.Name}} := option.None{{.Name}}()
		assert.EqualValues(t, {{.UnexpectedTestingValue}}, empty{{.Name}}.UnwrapOrElse(func() {{.Type}} {
			return {{.UnexpectedTestingValue}}
		}))
	})
}

func Test{{.Name}}_EncodeDecodeMsgpack(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		some{{.Name}} := option.Some{{.Name}}({{.TestingValue}})
		err := some{{.Name}}.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.{{.Name}}
		err = unmarshaled.DecodeMsgpack(dec)
		require.NoError(t, err)
		assert.True(t, unmarshaled.IsSome())
		assert.EqualValues(t, {{.TestingValue}}, unmarshaled.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		empty{{.Name}} := option.None{{.Name}}()
		err := empty{{.Name}}.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.{{.Name}}
		err = unmarshaled.DecodeMsgpack(dec)

		require.NoError(t, err)
		assert.False(t, unmarshaled.IsSome())
	})
}