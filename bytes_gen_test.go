// Code generated by github.com/tarantool/go-option; DO NOT EDIT.

package option_test

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/vmihailenco/msgpack/v5"

	"github.com/tarantool/go-option"
)

func TestBytes_IsSome(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBytes := option.SomeBytes([]byte("hello"))
		assert.True(t, someBytes.IsSome())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBytes := option.NoneBytes()
		assert.False(t, emptyBytes.IsSome())
	})
}

func TestBytes_IsZero(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBytes := option.SomeBytes([]byte("hello"))
		assert.False(t, someBytes.IsZero())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBytes := option.NoneBytes()
		assert.True(t, emptyBytes.IsZero())
	})
}

func TestBytes_IsNil(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBytes := option.SomeBytes([]byte("hello"))
		assert.False(t, someBytes.IsNil())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBytes := option.NoneBytes()
		assert.True(t, emptyBytes.IsNil())
	})
}

func TestBytes_Get(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBytes := option.SomeBytes([]byte("hello"))
		val, ok := someBytes.Get()
		require.True(t, ok)
		assert.EqualValues(t, []byte("hello"), val)
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBytes := option.NoneBytes()
		_, ok := emptyBytes.Get()
		require.False(t, ok)
	})
}

func TestBytes_MustGet(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBytes := option.SomeBytes([]byte("hello"))
		assert.EqualValues(t, []byte("hello"), someBytes.MustGet())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBytes := option.NoneBytes()
		assert.Panics(t, func() {
			emptyBytes.MustGet()
		})
	})
}

func TestBytes_Unwrap(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBytes := option.SomeBytes([]byte("hello"))
		assert.EqualValues(t, []byte("hello"), someBytes.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBytes := option.NoneBytes()
		assert.NotPanics(t, func() {
			emptyBytes.Unwrap()
		})
	})
}

func TestBytes_UnwrapOr(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBytes := option.SomeBytes([]byte("hello"))
		assert.EqualValues(t, []byte("hello"), someBytes.UnwrapOr([]byte("henlo")))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBytes := option.NoneBytes()
		assert.EqualValues(t, []byte("henlo"), emptyBytes.UnwrapOr([]byte("henlo")))
	})
}

func TestBytes_UnwrapOrElse(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBytes := option.SomeBytes([]byte("hello"))
		assert.EqualValues(t, []byte("hello"), someBytes.UnwrapOrElse(func() []byte {
			return []byte("henlo")
		}))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBytes := option.NoneBytes()
		assert.EqualValues(t, []byte("henlo"), emptyBytes.UnwrapOrElse(func() []byte {
			return []byte("henlo")
		}))
	})
}

func TestBytes_EncodeDecodeMsgpack(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		someBytes := option.SomeBytes([]byte("hello"))
		err := someBytes.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.Bytes
		err = unmarshaled.DecodeMsgpack(dec)
		require.NoError(t, err)
		assert.True(t, unmarshaled.IsSome())
		assert.EqualValues(t, []byte("hello"), unmarshaled.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		emptyBytes := option.NoneBytes()
		err := emptyBytes.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.Bytes
		err = unmarshaled.DecodeMsgpack(dec)

		require.NoError(t, err)
		assert.False(t, unmarshaled.IsSome())
	})
}
