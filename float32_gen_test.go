// Code generated by github.com/tarantool/go-option; DO NOT EDIT.

package option_test

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/vmihailenco/msgpack/v5"

	"github.com/tarantool/go-option"
)

func TestFloat32_IsSome(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someFloat32 := option.SomeFloat32(12)
		assert.True(t, someFloat32.IsSome())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyFloat32 := option.NoneFloat32()
		assert.False(t, emptyFloat32.IsSome())
	})
}

func TestFloat32_IsZero(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someFloat32 := option.SomeFloat32(12)
		assert.False(t, someFloat32.IsZero())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyFloat32 := option.NoneFloat32()
		assert.True(t, emptyFloat32.IsZero())
	})
}

func TestFloat32_IsNil(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someFloat32 := option.SomeFloat32(12)
		assert.False(t, someFloat32.IsNil())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyFloat32 := option.NoneFloat32()
		assert.True(t, emptyFloat32.IsNil())
	})
}

func TestFloat32_Get(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someFloat32 := option.SomeFloat32(12)
		val, ok := someFloat32.Get()
		require.True(t, ok)
		assert.EqualValues(t, 12, val)
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyFloat32 := option.NoneFloat32()
		_, ok := emptyFloat32.Get()
		require.False(t, ok)
	})
}

func TestFloat32_MustGet(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someFloat32 := option.SomeFloat32(12)
		assert.EqualValues(t, 12, someFloat32.MustGet())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyFloat32 := option.NoneFloat32()
		assert.Panics(t, func() {
			emptyFloat32.MustGet()
		})
	})
}

func TestFloat32_Unwrap(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someFloat32 := option.SomeFloat32(12)
		assert.EqualValues(t, 12, someFloat32.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyFloat32 := option.NoneFloat32()
		assert.NotPanics(t, func() {
			emptyFloat32.Unwrap()
		})
	})
}

func TestFloat32_UnwrapOr(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someFloat32 := option.SomeFloat32(12)
		assert.EqualValues(t, 12, someFloat32.UnwrapOr(13))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyFloat32 := option.NoneFloat32()
		assert.EqualValues(t, 13, emptyFloat32.UnwrapOr(13))
	})
}

func TestFloat32_UnwrapOrElse(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someFloat32 := option.SomeFloat32(12)
		assert.EqualValues(t, 12, someFloat32.UnwrapOrElse(func() float32 {
			return 13
		}))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyFloat32 := option.NoneFloat32()
		assert.EqualValues(t, 13, emptyFloat32.UnwrapOrElse(func() float32 {
			return 13
		}))
	})
}

func TestFloat32_EncodeDecodeMsgpack(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		someFloat32 := option.SomeFloat32(12)
		err := someFloat32.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.Float32
		err = unmarshaled.DecodeMsgpack(dec)
		require.NoError(t, err)
		assert.True(t, unmarshaled.IsSome())
		assert.EqualValues(t, 12, unmarshaled.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		emptyFloat32 := option.NoneFloat32()
		err := emptyFloat32.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.Float32
		err = unmarshaled.DecodeMsgpack(dec)

		require.NoError(t, err)
		assert.False(t, unmarshaled.IsSome())
	})
}
