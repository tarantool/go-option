// Code generated by github.com/tarantool/go-option; DO NOT EDIT.

package option_test

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/vmihailenco/msgpack/v5"

	"github.com/tarantool/go-option"
)

func TestBool_IsSome(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBool := option.SomeBool(true)
		assert.True(t, someBool.IsSome())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBool := option.NoneBool()
		assert.False(t, emptyBool.IsSome())
	})
}

func TestBool_IsZero(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBool := option.SomeBool(true)
		assert.False(t, someBool.IsZero())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBool := option.NoneBool()
		assert.True(t, emptyBool.IsZero())
	})
}

func TestBool_IsNil(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBool := option.SomeBool(true)
		assert.False(t, someBool.IsNil())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBool := option.NoneBool()
		assert.True(t, emptyBool.IsNil())
	})
}

func TestBool_Get(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBool := option.SomeBool(true)
		val, ok := someBool.Get()
		require.True(t, ok)
		assert.EqualValues(t, true, val)
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBool := option.NoneBool()
		_, ok := emptyBool.Get()
		require.False(t, ok)
	})
}

func TestBool_MustGet(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBool := option.SomeBool(true)
		assert.EqualValues(t, true, someBool.MustGet())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBool := option.NoneBool()
		assert.Panics(t, func() {
			emptyBool.MustGet()
		})
	})
}

func TestBool_Unwrap(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBool := option.SomeBool(true)
		assert.EqualValues(t, true, someBool.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBool := option.NoneBool()
		assert.NotPanics(t, func() {
			emptyBool.Unwrap()
		})
	})
}

func TestBool_UnwrapOr(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBool := option.SomeBool(true)
		assert.EqualValues(t, true, someBool.UnwrapOr(false))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBool := option.NoneBool()
		assert.EqualValues(t, false, emptyBool.UnwrapOr(false))
	})
}

func TestBool_UnwrapOrElse(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someBool := option.SomeBool(true)
		assert.EqualValues(t, true, someBool.UnwrapOrElse(func() bool {
			return false
		}))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyBool := option.NoneBool()
		assert.EqualValues(t, false, emptyBool.UnwrapOrElse(func() bool {
			return false
		}))
	})
}

func TestBool_EncodeDecodeMsgpack(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		someBool := option.SomeBool(true)
		err := someBool.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.Bool
		err = unmarshaled.DecodeMsgpack(dec)
		require.NoError(t, err)
		assert.True(t, unmarshaled.IsSome())
		assert.EqualValues(t, true, unmarshaled.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		emptyBool := option.NoneBool()
		err := emptyBool.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.Bool
		err = unmarshaled.DecodeMsgpack(dec)

		require.NoError(t, err)
		assert.False(t, unmarshaled.IsSome())
	})
}
