// Code generated by github.com/tarantool/go-option; DO NOT EDIT.

package option

import (
	"github.com/vmihailenco/msgpack/v5"
	"github.com/vmihailenco/msgpack/v5/msgpcode"
)

// Int8 represents an optional value of type int8.
// It can either hold a valid int8 (IsSome == true) or be empty (IsZero == true).
type Int8 struct {
	value  int8
	exists bool
}

// SomeInt8 creates an optional Int8 with the given int8 value.
// The returned Int8 will have IsSome() == true and IsZero() == false.
//
// Example:
//
//	o := SomeInt8(12)
//	if o.IsSome() {
//	    v := o.Unwrap() // v == 12
//	}
func SomeInt8(value int8) Int8 {
	return Int8{
		value:  value,
		exists: true,
	}
}

// NoneInt8 creates an empty optional Int8 value.
// The returned Int8 will have IsSome() == false and IsZero() == true.
//
// Example:
//
//	o := NoneInt8()
//	if o.IsZero() {
//	    fmt.Println("value is absent")
//	}
func NoneInt8() Int8 {
	return Int8{
		exists: false,
		value:  zero[int8](),
	}
}

// IsSome returns true if the Int8 contains a value.
// This indicates the value is explicitly set (not None).
func (o Int8) IsSome() bool {
	return o.exists
}

// IsZero returns true if the Int8 does not contain a value.
// Equivalent to !IsSome(). Useful for consistency with types where
// zero value (e.g. 0, false, zero struct) is valid and needs to be distinguished.
func (o Int8) IsZero() bool {
	return !o.exists
}

// IsNil is an alias for IsZero.
//
// This method is provided for compatibility with the msgpack Encoder interface.
func (o Int8) IsNil() bool {
	return o.IsZero()
}

// Get returns the stored value and a boolean flag indicating its presence.
// If the value is present, returns (value, true).
// If the value is absent, returns (zero value of int8, false).
//
// Recommended usage:
//
//	if value, ok := o.Get(); ok {
//	    // use value
//	}
func (o Int8) Get() (int8, bool) {
	return o.value, o.exists
}

// MustGet returns the stored value if it is present.
// Panics if the value is absent (i.e., IsZero() == true).
//
// Use with caution â€” only when you are certain the value exists.
//
// Panics with: "optional value is not set" if no value is set.
func (o Int8) MustGet() int8 {
	if !o.exists {
		panic("optional value is not set")
	}

	return o.value
}

// Unwrap returns the stored value regardless of presence.
// If no value is set, returns the zero value for int8.
//
// Warning: Does not check presence. Use IsSome() before calling if you need
// to distinguish between absent value and explicit zero value.
func (o Int8) Unwrap() int8 {
	return o.value
}

// UnwrapOr returns the stored value if present.
// Otherwise, returns the provided default value.
//
// Example:
//
//	o := NoneInt8()
//	v := o.UnwrapOr(someDefaultInt8)
func (o Int8) UnwrapOr(defaultValue int8) int8 {
	if o.exists {
		return o.value
	}

	return defaultValue
}

// UnwrapOrElse returns the stored value if present.
// Otherwise, calls the provided function and returns its result.
// Useful when the default value requires computation or side effects.
//
// Example:
//
//	o := NoneInt8()
//	v := o.UnwrapOrElse(func() int8 { return computeDefault() })
func (o Int8) UnwrapOrElse(defaultValue func() int8) int8 {
	if o.exists {
		return o.value
	}

	return defaultValue()
}

// EncodeMsgpack encodes the Int8 value using MessagePack format.
// - If the value is present, it is encoded as int8.
// - If the value is absent (None), it is encoded as nil.
//
// Returns an error if encoding fails.
func (o Int8) EncodeMsgpack(encoder *msgpack.Encoder) error {
	if o.exists {
		return newEncodeError("Int8", encodeInt8(encoder, o.value))
	}

	return newEncodeError("Int8", encoder.EncodeNil())
}

// DecodeMsgpack decodes a Int8 value from MessagePack format.
// Supports two input types:
//   - nil: interpreted as no value (NoneInt8)
//   - int8: interpreted as a present value (SomeInt8)
//
// Returns an error if the input type is unsupported or decoding fails.
//
// After successful decoding:
//   - on nil: exists = false, value = default zero value
//   - on int8: exists = true, value = decoded value
func (o *Int8) DecodeMsgpack(decoder *msgpack.Decoder) error {
	code, err := decoder.PeekCode()
	if err != nil {
		return newDecodeError("Int8", err)
	}

	switch {
	case code == msgpcode.Nil:
		o.exists = false

		return newDecodeError("Int8", decoder.Skip())
	case checkNumber(code):
		o.value, err = decodeInt8(decoder)
		if err != nil {
			return newDecodeError("Int8", err)
		}
		o.exists = true

		return err
	default:
		return newDecodeWithCodeError("Int8", code)
	}
}
