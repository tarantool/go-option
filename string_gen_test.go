// Code generated by github.com/tarantool/go-option; DO NOT EDIT.

package option_test

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/vmihailenco/msgpack/v5"

	"github.com/tarantool/go-option"
)

func TestString_IsSome(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someString := option.SomeString("hello")
		assert.True(t, someString.IsSome())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyString := option.NoneString()
		assert.False(t, emptyString.IsSome())
	})
}

func TestString_IsZero(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someString := option.SomeString("hello")
		assert.False(t, someString.IsZero())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyString := option.NoneString()
		assert.True(t, emptyString.IsZero())
	})
}

func TestString_IsNil(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someString := option.SomeString("hello")
		assert.False(t, someString.IsNil())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyString := option.NoneString()
		assert.True(t, emptyString.IsNil())
	})
}

func TestString_Get(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someString := option.SomeString("hello")
		val, ok := someString.Get()
		require.True(t, ok)
		assert.EqualValues(t, "hello", val)
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyString := option.NoneString()
		_, ok := emptyString.Get()
		require.False(t, ok)
	})
}

func TestString_MustGet(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someString := option.SomeString("hello")
		assert.EqualValues(t, "hello", someString.MustGet())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyString := option.NoneString()
		assert.Panics(t, func() {
			emptyString.MustGet()
		})
	})
}

func TestString_Unwrap(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someString := option.SomeString("hello")
		assert.EqualValues(t, "hello", someString.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyString := option.NoneString()
		assert.NotPanics(t, func() {
			emptyString.Unwrap()
		})
	})
}

func TestString_UnwrapOr(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someString := option.SomeString("hello")
		assert.EqualValues(t, "hello", someString.UnwrapOr("henlo"))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyString := option.NoneString()
		assert.EqualValues(t, "henlo", emptyString.UnwrapOr("henlo"))
	})
}

func TestString_UnwrapOrElse(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someString := option.SomeString("hello")
		assert.EqualValues(t, "hello", someString.UnwrapOrElse(func() string {
			return "henlo"
		}))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyString := option.NoneString()
		assert.EqualValues(t, "henlo", emptyString.UnwrapOrElse(func() string {
			return "henlo"
		}))
	})
}

func TestString_EncodeDecodeMsgpack(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		someString := option.SomeString("hello")
		err := someString.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.String
		err = unmarshaled.DecodeMsgpack(dec)
		require.NoError(t, err)
		assert.True(t, unmarshaled.IsSome())
		assert.EqualValues(t, "hello", unmarshaled.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		emptyString := option.NoneString()
		err := emptyString.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.String
		err = unmarshaled.DecodeMsgpack(dec)

		require.NoError(t, err)
		assert.False(t, unmarshaled.IsSome())
	})
}
