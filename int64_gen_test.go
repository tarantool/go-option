// Code generated by github.com/tarantool/go-option; DO NOT EDIT.

package option_test

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/vmihailenco/msgpack/v5"

	"github.com/tarantool/go-option"
)

func TestInt64_IsSome(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someInt64 := option.SomeInt64(12)
		assert.True(t, someInt64.IsSome())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyInt64 := option.NoneInt64()
		assert.False(t, emptyInt64.IsSome())
	})
}

func TestInt64_IsZero(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someInt64 := option.SomeInt64(12)
		assert.False(t, someInt64.IsZero())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyInt64 := option.NoneInt64()
		assert.True(t, emptyInt64.IsZero())
	})
}

func TestInt64_IsNil(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someInt64 := option.SomeInt64(12)
		assert.False(t, someInt64.IsNil())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyInt64 := option.NoneInt64()
		assert.True(t, emptyInt64.IsNil())
	})
}

func TestInt64_Get(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someInt64 := option.SomeInt64(12)
		val, ok := someInt64.Get()
		require.True(t, ok)
		assert.EqualValues(t, 12, val)
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyInt64 := option.NoneInt64()
		_, ok := emptyInt64.Get()
		require.False(t, ok)
	})
}

func TestInt64_MustGet(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someInt64 := option.SomeInt64(12)
		assert.EqualValues(t, 12, someInt64.MustGet())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyInt64 := option.NoneInt64()
		assert.Panics(t, func() {
			emptyInt64.MustGet()
		})
	})
}

func TestInt64_Unwrap(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someInt64 := option.SomeInt64(12)
		assert.EqualValues(t, 12, someInt64.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyInt64 := option.NoneInt64()
		assert.NotPanics(t, func() {
			emptyInt64.Unwrap()
		})
	})
}

func TestInt64_UnwrapOr(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someInt64 := option.SomeInt64(12)
		assert.EqualValues(t, 12, someInt64.UnwrapOr(13))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyInt64 := option.NoneInt64()
		assert.EqualValues(t, 13, emptyInt64.UnwrapOr(13))
	})
}

func TestInt64_UnwrapOrElse(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someInt64 := option.SomeInt64(12)
		assert.EqualValues(t, 12, someInt64.UnwrapOrElse(func() int64 {
			return 13
		}))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyInt64 := option.NoneInt64()
		assert.EqualValues(t, 13, emptyInt64.UnwrapOrElse(func() int64 {
			return 13
		}))
	})
}

func TestInt64_EncodeDecodeMsgpack(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		someInt64 := option.SomeInt64(12)
		err := someInt64.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.Int64
		err = unmarshaled.DecodeMsgpack(dec)
		require.NoError(t, err)
		assert.True(t, unmarshaled.IsSome())
		assert.EqualValues(t, 12, unmarshaled.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		emptyInt64 := option.NoneInt64()
		err := emptyInt64.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.Int64
		err = unmarshaled.DecodeMsgpack(dec)

		require.NoError(t, err)
		assert.False(t, unmarshaled.IsSome())
	})
}
