// Code generated by github.com/tarantool/go-option; DO NOT EDIT.

package option_test

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/vmihailenco/msgpack/v5"

	"github.com/tarantool/go-option"
)

func TestUint16_IsSome(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someUint16 := option.SomeUint16(12)
		assert.True(t, someUint16.IsSome())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyUint16 := option.NoneUint16()
		assert.False(t, emptyUint16.IsSome())
	})
}

func TestUint16_IsZero(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someUint16 := option.SomeUint16(12)
		assert.False(t, someUint16.IsZero())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyUint16 := option.NoneUint16()
		assert.True(t, emptyUint16.IsZero())
	})
}

func TestUint16_IsNil(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someUint16 := option.SomeUint16(12)
		assert.False(t, someUint16.IsNil())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyUint16 := option.NoneUint16()
		assert.True(t, emptyUint16.IsNil())
	})
}

func TestUint16_Get(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someUint16 := option.SomeUint16(12)
		val, ok := someUint16.Get()
		require.True(t, ok)
		assert.EqualValues(t, 12, val)
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyUint16 := option.NoneUint16()
		_, ok := emptyUint16.Get()
		require.False(t, ok)
	})
}

func TestUint16_MustGet(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someUint16 := option.SomeUint16(12)
		assert.EqualValues(t, 12, someUint16.MustGet())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyUint16 := option.NoneUint16()
		assert.Panics(t, func() {
			emptyUint16.MustGet()
		})
	})
}

func TestUint16_Unwrap(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someUint16 := option.SomeUint16(12)
		assert.EqualValues(t, 12, someUint16.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyUint16 := option.NoneUint16()
		assert.NotPanics(t, func() {
			emptyUint16.Unwrap()
		})
	})
}

func TestUint16_UnwrapOr(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someUint16 := option.SomeUint16(12)
		assert.EqualValues(t, 12, someUint16.UnwrapOr(13))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyUint16 := option.NoneUint16()
		assert.EqualValues(t, 13, emptyUint16.UnwrapOr(13))
	})
}

func TestUint16_UnwrapOrElse(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		someUint16 := option.SomeUint16(12)
		assert.EqualValues(t, 12, someUint16.UnwrapOrElse(func() uint16 {
			return 13
		}))
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		emptyUint16 := option.NoneUint16()
		assert.EqualValues(t, 13, emptyUint16.UnwrapOrElse(func() uint16 {
			return 13
		}))
	})
}

func TestUint16_EncodeDecodeMsgpack(t *testing.T) {
	t.Parallel()

	t.Run("some", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		someUint16 := option.SomeUint16(12)
		err := someUint16.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.Uint16
		err = unmarshaled.DecodeMsgpack(dec)
		require.NoError(t, err)
		assert.True(t, unmarshaled.IsSome())
		assert.EqualValues(t, 12, unmarshaled.Unwrap())
	})

	t.Run("none", func(t *testing.T) {
		t.Parallel()

		var buf bytes.Buffer

		enc := msgpack.NewEncoder(&buf)
		dec := msgpack.NewDecoder(&buf)

		emptyUint16 := option.NoneUint16()
		err := emptyUint16.EncodeMsgpack(enc)
		require.NoError(t, err)

		var unmarshaled option.Uint16
		err = unmarshaled.DecodeMsgpack(dec)

		require.NoError(t, err)
		assert.False(t, unmarshaled.IsSome())
	})
}
